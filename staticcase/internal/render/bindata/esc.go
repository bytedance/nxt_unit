// Code generated for package bindata by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/basefunc.tmpl
// templates/call.tmpl
// templates/finalsuite.tmpl
// templates/function.tmpl
// templates/header.tmpl
// templates/inline.tmpl
// templates/inputs.tmpl
// templates/message.tmpl
// templates/results.tmpl
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBasefuncTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xcd\x6e\xdb\x46\x10\x3e\x93\x4f\x31\x11\x94\x80\x2c\x94\x35\xd0\xa3\x0c\x1d\x9a\xc6\x0d\x72\x48\x1d\xd8\x6e\x73\x28\x8a\x82\xa2\x86\x32\x91\xd5\x52\x59\x0e\x6d\x08\x8b\x7d\xf7\x62\x96\x4b\x72\x49\x51\x89\x2f\xf1\xc1\x24\x67\xe7\xe7\x9b\xbf\x6f\x65\xcc\x0e\x8b\x52\x21\x2c\xb6\x59\x8d\x45\xa3\xf2\x85\xb5\xb1\x31\x6f\x61\x59\xc0\x7a\x03\xc2\xda\x38\xbe\xba\x82\x67\x84\x5c\x63\x46\x08\xf4\x88\x40\x58\x13\x10\x1e\x8e\x92\x25\x45\xa5\x9d\x54\x37\x4a\x65\x5b\x89\xc0\x6e\xa8\xac\x14\x1b\x1e\x25\x66\x35\x42\x51\x4a\xd9\x9b\xe6\x2c\xc9\xd4\x0e\x0e\x55\xfe\x75\xd0\xe6\x17\x30\x46\x3c\x60\x4d\x7f\x66\x07\xb4\x36\x21\xf8\x85\x0d\x4a\xb5\x17\x0f\x29\x98\x18\x00\x80\xc1\xe9\x4c\xed\x11\x96\xe2\x83\xac\xb6\x99\xfc\xa8\x4a\xb2\xd6\x1d\x42\xab\x21\xfc\x27\xeb\xa2\xda\x59\x1b\x47\xfc\xfa\x5c\xd2\x23\x88\x3b\xcc\xb1\x7c\x42\xcd\x52\x27\x2e\x0b\x10\x1f\xeb\x7b\xd2\x4d\x4e\x4e\xd8\x4b\xff\x28\x51\xee\xea\x56\x16\xd1\xe9\x88\xd0\x4a\xa0\x76\xca\x60\xdc\xc1\x80\x68\x6c\x10\x19\xe3\xbe\xb9\x8a\x2e\xb1\xd3\x11\xfd\x51\x00\x2c\x8a\xa2\x3e\x66\x27\x9a\xe0\x0e\x5e\x19\x15\x17\xe8\x73\xa6\xb3\x03\x12\x6a\x17\xcc\x41\xfb\x4d\xef\x47\xc0\x02\x58\xe7\x16\x2e\xa0\x13\x9d\xa1\x0b\x22\x8e\xe2\x73\x41\x5d\x20\xd7\xfe\x36\x90\x89\x87\xa2\x33\xb6\x44\x55\x04\x82\xbb\xb7\x4b\xad\xe5\x27\x2b\x96\x6a\x6f\xcc\xe0\xa4\xeb\xcc\x59\x3b\x20\xf8\xf3\xc9\xf2\x98\xf4\xcd\x09\xea\x0b\x93\x3f\xdf\x97\xf6\x71\xe6\x08\x65\x8d\x33\x46\xc6\x74\xc1\x27\x45\x38\xb3\x3f\xc3\x7e\x2e\x99\xed\x4c\xe8\xc8\xf5\x87\xff\xfd\xc0\x51\xd0\xb3\x3b\xac\x1b\x49\x53\x47\xc6\x7c\xc9\x14\x5d\x80\x7c\x19\xdc\x1d\x52\xa3\x55\x7d\xa3\x75\x35\x2d\x36\xfb\xbb\xd1\x1a\xb6\x55\x25\x2f\x78\xf2\xfd\xc7\x9a\x6a\x26\x86\x7f\xfe\xe5\xd7\xa1\xfd\x57\x57\xf0\x70\xfb\xfe\x76\x0d\xd9\x6e\x37\x5a\x74\x6f\x1c\x31\x4b\xfc\xb7\x02\x22\xb6\xf6\x39\xb6\xde\x4c\x1c\x75\x18\xf1\x1b\x88\xbf\x6a\xfc\x54\xe5\x5f\x39\x2d\xf8\x15\xac\x65\x92\x28\xa9\x12\x9f\x33\xca\x1f\x7f\xaf\xd4\x13\x9e\x12\x22\x37\x63\x2b\xa0\x95\xe3\x8f\x24\x35\x7d\x9f\xc1\x5a\xc8\x9d\x9a\xf8\xae\xb6\x1f\xf1\x59\xf0\xda\x95\x0a\xaa\x62\x4c\x51\xf5\x4c\x9f\x96\x82\xd1\x4e\x5a\x34\x30\xd0\xb8\x90\x03\xb3\xdc\x37\x5b\x97\xfd\x48\xc8\xa3\x23\x25\x4a\x6b\xdb\x32\x11\x5d\xf7\x38\xa3\x70\x21\x3a\x45\xbf\x6a\xd6\x2a\xde\xb4\xf5\x06\xf8\x79\x6d\x0c\x87\x03\x67\x45\xe2\xae\x51\x89\x31\xec\x3e\xd0\x35\xa6\x5d\x09\x22\xe1\x3f\x39\x8a\x2f\xcf\x94\x75\xa3\x59\x84\xfd\x7b\x92\x8e\x41\xf6\xbc\x76\x81\x72\x2f\x91\x2e\xcb\x47\xfb\xb8\xde\x40\x0b\x9c\x67\xc1\x29\x67\xda\xda\x37\x3e\x9a\x1f\x7d\xf1\x77\x26\x1b\xb4\xd6\x74\x2e\x2e\x70\x71\x64\x8c\x68\x6f\x95\x35\x10\xf9\x43\x11\x30\xf4\x6a\x70\x30\x30\x73\x34\x43\xd7\x67\x1f\x3e\xde\x0c\xc1\x76\x69\x7e\xd1\x25\xf5\xd9\x8f\x88\x77\xbd\x81\x37\xdb\x13\x61\x2d\xde\x35\x45\x81\xda\xbc\x24\xa0\x1f\x83\x96\x6c\x6f\x95\x3c\x85\xab\x9d\x9e\xcb\x6f\x15\xba\x2a\xa5\xd0\x23\xeb\x6f\xef\x85\x6e\x39\x66\x01\xcb\xc2\x11\xca\x70\x92\x67\x52\xb6\xe2\x4b\x28\xa6\x9c\xc2\xbe\xcb\xc2\x77\x6d\x0a\xcc\x5a\x40\xad\xdb\xae\xce\x05\xb9\xee\x96\x12\x12\xd6\x7b\xb5\x01\x55\xca\x94\x9f\x44\xa2\x63\x28\xdf\x66\x12\xce\x65\x91\x2c\x42\x5f\x07\xac\xeb\x6c\x8f\x3e\x15\x64\x0d\xd8\xc0\xeb\xa7\x15\x3c\x7b\xf3\xd7\x4f\x8b\xd5\x28\x7c\xa9\x8e\x4d\x9f\x3c\x6a\xbd\x0a\x82\xa5\xf3\x97\xf3\xf4\x62\x1d\x48\xfa\x7b\x4d\x77\x65\xf9\x50\xd1\x30\xd9\xfd\x10\x88\x7b\x77\x45\x26\xe9\x75\xa0\xd2\xa6\x1d\x52\xfd\x30\x18\xcc\x72\x6d\x8c\x77\x59\x5d\xe6\xc1\xef\x8a\xbe\xfa\xcb\x62\x6e\x00\x78\x6b\x46\x18\xc2\x42\xc8\x52\xe1\xb4\x13\x2f\xc6\xf3\x93\xe2\xbf\xd2\x58\x48\xcc\x49\xbc\x47\x3c\xde\x7c\x6b\x32\x99\xf4\x1e\x56\x63\x40\x69\x88\xa8\x5f\xe0\x97\x0c\x4a\x07\xd8\x83\xfd\xd4\x48\x2a\x8f\x72\x04\xd6\xe3\x19\x86\xe9\x07\x93\x74\x11\xe4\xe5\xdf\x7b\xe1\xad\xc0\x77\x18\x27\xd4\xaa\xc0\xdb\xe0\x32\x61\x17\x36\xb6\x71\xec\x21\xfd\x1f\x00\x00\xff\xff\x54\x32\x2c\x46\xc2\x0b\x00\x00")

func templatesBasefuncTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBasefuncTmpl,
		"templates/basefunc.tmpl",
	)
}

func templatesBasefuncTmpl() (*asset, error) {
	bytes, err := templatesBasefuncTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/basefunc.tmpl", size: 3010, mode: os.FileMode(420), modTime: time.Unix(1666927126, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCallTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x4d\x6a\xc4\x30\x0c\x85\xaf\x22\x42\x16\x2d\x04\x1d\xa0\xd0\x45\x97\xd9\x94\xd2\xdf\xb5\xb1\x95\x54\x90\xb8\x45\x56\x3b\x0c\x42\x77\x1f\x6c\x32\xe3\xd5\x33\xcf\x1f\xef\x93\x59\xa2\x85\x33\xc1\x10\xc3\xb6\x0d\xee\x66\x27\xd6\x6f\xc0\x57\x8a\xc4\xff\x24\xb5\xe1\x05\xf2\x8f\x02\xce\xe5\x4d\xe5\x2f\xaa\xbb\x2a\x9a\x51\x4e\xf5\xf7\x4a\x02\xba\xf7\x16\x9f\xc3\x4e\xed\xf1\xc1\xc9\xfd\xce\x4c\x42\x5e\x09\x46\x9e\x60\xa4\x0d\x1e\x1e\x01\x5f\x82\x84\x9d\x94\xa4\x1c\x96\x91\xdd\x27\xb8\x6d\x74\xef\x97\xb0\xd6\x5b\x54\xf1\x49\xd6\xd2\x35\x6d\xa2\x9a\x1b\x8d\xef\xe7\x5f\xc2\xb9\x7c\x06\xe1\x90\x38\xba\x23\x76\xb6\xc5\xfd\x91\x97\x00\x00\x00\xff\xff\xf4\xce\x7f\xc5\xf9\x00\x00\x00")

func templatesCallTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCallTmpl,
		"templates/call.tmpl",
	)
}

func templatesCallTmpl() (*asset, error) {
	bytes, err := templatesCallTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/call.tmpl", size: 249, mode: os.FileMode(420), modTime: time.Unix(1666927126, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFinalsuiteTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5f\x6f\xdb\x36\x10\x7f\xb6\x3f\xc5\xd5\xc8\x0a\x69\x70\x59\xa0\x7b\x4b\x90\x87\x76\x6d\x87\x3e\x64\x29\xec\x76\x7d\x28\x8a\x81\x91\x4f\x09\x11\x9a\x52\xc9\x53\x5a\x83\xe0\x77\x1f\x48\x51\x12\x25\x39\x5e\x80\x2d\x0f\x91\x79\x3c\xde\xfd\xee\x0f\xef\x47\x6b\x77\x58\x0a\x85\xb0\x2a\x85\xe2\xd2\x34\x82\x70\xe5\xdc\xd2\xda\x17\x70\x56\xc2\xf9\x25\x30\xe7\x96\xcb\xb2\x51\x05\x58\xcb\x3e\xa1\xa1\x3f\xf9\x1e\x9d\xcb\x08\x7e\x25\x34\x24\xd4\x2d\xfb\x94\x83\x5d\x02\x00\xf8\x53\x9a\xab\x5b\x84\x33\xf6\xa6\x11\x72\x87\xda\x38\x17\xb6\xc2\x2e\x8b\x0b\xaf\x87\x6a\xe7\xdc\x72\xe1\x7f\xfe\x10\x74\x07\x6c\x83\x05\x8a\x07\xd4\x5e\x1a\xc4\xa2\x04\xf6\xc1\x6c\x49\x37\x05\x05\x61\x2f\x7d\x2f\x50\xee\x4c\x2b\x5b\xd0\xa1\x46\x68\x25\x60\x82\x32\xd8\xb0\x31\xa0\x19\x1f\xe8\xcc\x48\x02\xf6\x41\xed\xf0\x67\xdc\xbf\xe2\x3f\xc3\xb2\x53\x6b\x91\x86\x2d\x9f\x85\x10\xff\xa1\xc6\xb8\x3d\x89\x23\x9a\x1d\x56\x3d\xe0\x4e\x34\x09\x3a\xf9\xe9\x43\xf2\x99\xfd\xc8\x35\xdf\x23\xb5\x49\x6b\xe3\x7a\xad\x6f\x47\x51\x25\x31\xcd\x4f\x04\x87\x41\x34\xc3\x9b\x78\x1c\xfb\x0f\x5e\x7c\x21\xa3\x17\xdb\x55\x0b\xac\xf5\xc0\x32\x55\x11\x30\x5f\xf3\x5d\xee\x9c\xff\x7a\x45\xa1\x6e\xad\x6d\x2d\x0c\xea\x47\x0a\x09\xc9\x5f\x8c\x94\xab\xdd\x50\xd6\xa4\x32\x30\xf9\x8b\x15\x6d\x3f\x33\x43\x28\x0d\x1e\x39\x64\x6d\xe7\x7c\x92\x81\xd9\xf9\x19\xf6\xb9\xe4\x68\x59\x52\x43\xa1\x38\xfe\xdf\xbf\x18\x4a\x0a\xb6\x41\xd3\x48\x9a\x1a\xb2\xf6\x0b\x57\xf4\x08\xe4\xc7\xc1\x6d\x90\x1a\xad\xcc\x3b\xad\xab\x69\xb2\xbd\xbd\x77\x5a\xc3\x4d\x55\xc9\x13\x96\xae\xaa\xe2\xde\x00\x80\xbf\xdf\x59\x3e\x75\x80\xdf\x81\x7d\x36\xe8\x95\x3c\x26\xf8\x0d\x46\x47\xd5\x3d\x1e\xae\x1b\xaa\x1b\xba\xe2\x35\xec\x79\xfd\xb5\xed\x8c\x6f\x5f\xbf\x09\x45\xa8\x4b\x5e\xa0\x9d\xc5\x01\xb1\x07\x7d\xcf\x19\x3f\x60\xac\x65\x9b\xea\xc7\x5b\x4e\xdc\xef\x94\x95\x86\xbf\xd7\x40\xe4\xb7\x62\xe6\x5a\x55\xdb\x5f\x96\x29\xae\x57\xe0\xdc\xbe\x2a\xee\x05\x55\xec\x23\xa7\xe2\xee\xf7\x4a\x3d\xe0\x21\x23\x0a\x8d\xbb\x06\x5a\xc7\x08\x6d\xdf\x3c\xe0\x1c\x14\x41\x8d\x9d\xd4\x8e\xd7\xc4\x07\x40\xc4\x42\xbe\xb2\xfc\x62\xb9\x38\x91\xa6\x14\x8e\x17\x66\xe6\x60\x0a\x2e\xa5\x77\xa4\xb0\xa0\x3c\x16\x2e\x2b\xf7\xc4\x42\xf1\xca\x6c\xb5\xfd\x0c\x86\xaa\xda\x00\xdd\x21\x44\x45\x51\xa9\x55\x9e\x8f\x41\x9c\x2a\xcd\x22\x66\xba\x68\x8f\x7f\xe4\x74\xe7\xb3\x78\x5b\xed\x43\xad\x1e\x5e\xb1\xd7\x75\x2d\x0f\xef\x1b\x55\x44\x04\x13\x64\xeb\xa7\x21\xea\x1d\xed\xb0\x44\x9d\xba\x63\x1b\x34\x48\xd9\xa0\x91\xb4\xbf\xc7\xba\x25\x4e\x78\x85\x6a\x7a\x03\x16\x09\x39\xcc\x9a\x35\xc6\x9d\xce\x51\xdf\xfd\xdb\xe6\x26\x34\xc6\x48\xe8\xef\xaa\x94\x28\x9d\x6b\x3b\x88\xe8\x62\x76\x32\x4c\xa0\x4e\x31\xce\x36\xe7\x94\x1f\x6d\xe7\x97\xe0\xbf\x17\xd6\xf6\xad\xba\x20\xb6\x69\x54\x66\xad\x37\x9f\xe8\x5a\xdb\xce\x20\x22\x16\x97\xde\x4b\x6c\x9d\x29\x39\x2e\x8e\x22\xec\x7f\x67\xf9\x18\x64\xcf\x22\x8f\xb0\xe3\x63\xfc\xe8\xe5\xa3\x01\x18\xae\x57\x98\x63\x87\x1a\x83\x32\xd7\xce\x3d\x8f\xde\xe2\xac\x61\x7f\x71\xd9\xa0\x73\x76\x60\xc7\xa3\xb4\xf9\x54\xde\x8c\xf5\x62\xed\x43\xe1\xdc\xdf\x9b\xd6\x10\x4b\xd8\x74\x9d\xd8\x1c\x48\x73\xba\x3c\x42\xac\xb3\x45\xc4\x7a\x84\x0a\xbb\x14\x7d\xd1\x82\xfa\xcc\x8d\x28\xf2\xfc\x12\x9e\xdf\x1c\x08\x0d\x7b\xd3\x94\x25\x6a\xfb\x14\x87\xb1\x85\x5a\x66\xbc\x56\xf2\x90\xce\xe1\x7c\x2e\xbf\x56\x18\x32\x9c\x43\x8f\x8c\x70\x5f\x4b\x4e\x08\x2b\xdd\x12\xc2\x0a\xce\xca\x30\xfd\x87\x1d\x7f\x31\x5b\xf1\x63\x28\xa6\x04\xe0\x6d\x8b\x32\x56\x7c\x0a\xcc\x39\x40\xad\xdb\x8e\x38\xe6\xe4\xa2\xbb\x62\x90\x79\xbd\x67\x97\xa0\x84\xcc\xfd\x97\x88\x75\x74\x12\x5b\x64\x11\x27\xe7\xb6\xca\x52\xe5\x75\x37\x51\xb7\x77\x55\x23\x77\x7e\x16\xec\x6f\x24\xc2\x3a\x31\x91\x8f\x9e\x60\x13\x4e\x3c\xd6\x03\x27\x8b\x3e\x3e\x7e\xaa\xea\x21\x2f\x7f\x54\x34\x5c\x8b\xbe\x0b\xd8\x36\xd0\x56\x96\x5f\x24\x2a\x6d\xdc\x29\x31\x0f\x8f\xc2\x21\xfa\x5e\xff\x64\xe8\x83\x95\x7c\xd6\xd6\x9e\x8a\x5a\xbc\x6f\xb8\x11\x45\xf2\xc0\xec\x4b\x79\x56\x1e\xeb\x26\x7f\x7d\x47\xf1\x0c\x45\x15\x4a\x0a\x85\xd3\xb2\x3e\x29\xb6\xff\x39\xb4\x49\x53\xfe\xa7\x48\xa0\x9b\xe4\xcf\xda\x67\x86\x61\xef\xbe\x37\x5c\xbe\xaf\xe4\x2e\x30\xe9\xb6\xd6\x42\x51\x99\xad\x7e\x79\x58\xad\x87\x68\xf3\xf5\x7c\x73\x0c\x3c\x0e\xe8\xc5\xcb\x97\xf0\xe9\xfa\xed\x35\xd4\x1a\x0b\x61\x10\xb8\x31\xa8\x3d\xe5\x81\x30\x40\x55\x05\x06\x95\x11\x24\x1e\x70\x0d\xb5\x44\x6e\x10\x4a\x21\x65\xa2\x77\x73\x80\x43\xd5\x68\x83\xb2\x5c\x3e\x61\x7c\x4d\x99\xcc\xbf\x49\x5c\xde\x3f\x94\x5e\x24\x84\xe8\xd3\xeb\x96\x6e\xb9\xec\x88\xe2\x9f\x00\x00\x00\xff\xff\x1f\x57\xe3\x13\xb9\x0d\x00\x00")

func templatesFinalsuiteTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFinalsuiteTmpl,
		"templates/finalsuite.tmpl",
	)
}

func templatesFinalsuiteTmpl() (*asset, error) {
	bytes, err := templatesFinalsuiteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/finalsuite.tmpl", size: 3513, mode: os.FileMode(420), modTime: time.Unix(1666927126, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x4b\x6f\xdb\x38\x10\x3e\xc7\xbf\x62\x1a\x18\x85\xb4\x75\x89\x6c\xf7\x66\x57\x87\x36\x7d\x20\xc0\xa6\x29\x9c\xa4\x3d\x14\x3d\x30\xd2\xc8\x11\x42\x53\x2a\x35\x4a\x63\x10\xfc\xef\x0b\x92\x92\xad\x97\x9d\xb4\xbb\x58\x1e\xa2\x68\x38\x9c\xf9\xe6\xc9\x91\xb5\x4e\x30\xcd\x24\xc2\x71\x5a\xc9\x98\xb2\x5c\x1e\x1b\x33\xd1\xfa\x25\x4c\x53\x98\x47\xc0\x8c\x99\xfc\x5c\x69\x3d\x65\xd7\x59\x62\x0c\x7b\x93\x24\xc1\x9f\xe1\x64\x95\x83\xe5\x0f\x08\xfe\x20\x2c\x29\x93\x2b\x76\x15\x02\xe8\xc9\x91\x3d\xfa\x33\xa3\x5b\x60\x4b\x8c\x31\xbb\x47\x65\xcc\xe4\xc8\x91\xb3\x14\xd8\x59\x79\x49\xaa\x8a\xc9\x11\xb7\xd4\x0f\x19\x8a\xa4\xf4\xb4\x23\xda\x14\x08\x9e\x02\xa5\x63\xb6\x72\x6b\x6e\xc5\xe5\x0a\x7b\x07\x1a\x31\x82\x80\x9d\xc9\x04\x1f\xea\xfd\x73\xfe\xe0\x5e\x1b\x36\x00\x00\xad\xdd\x96\xb5\x0b\xb4\x66\x57\x9b\x02\xdb\x52\x50\x26\xf5\x6b\xf7\x6d\x8b\xb6\x21\xb5\xfe\xef\xfd\x6b\xed\xb9\xc2\x92\x3e\x73\xc5\xd7\x48\xa8\x1c\x4c\x67\xd4\x1b\xb5\xea\x98\xd4\x32\x68\x78\xc2\x29\x74\xa4\x01\xd8\x96\xc6\xae\x7e\xa7\xc5\x06\xa4\xd6\xa2\x27\x50\x2f\xad\x2d\xb0\x40\xe6\x04\xec\x13\x5f\x63\x12\x1a\x63\x9f\x96\x31\x93\x2b\xad\xbd\x84\x1d\xfb\x48\x14\xa1\xb5\x6a\x4b\xb9\x4c\x76\x31\x6d\x85\x05\x7a\xab\x0e\xa7\x7f\x0c\x04\xa1\x28\x71\xe4\x90\xd6\x8d\xf2\x9e\x07\x06\xe7\x07\xd8\x87\x94\xd1\xb0\xb4\x05\xb9\xe0\xd8\x3f\x8f\x08\x6a\x05\x6c\x89\x65\x25\xa8\x2f\x48\xeb\xaf\x5c\xd2\x1e\xc8\xfb\xc1\x2d\x91\x2a\x25\xcb\xf7\x4a\xe5\x7d\x67\x5b\x79\xef\x95\x82\x9b\x3c\x17\x07\x24\x9d\xe7\xf1\x5d\x09\x00\xf7\x5c\x65\xfc\x46\x60\xcc\x55\xc2\x1c\x71\x89\x71\xae\x92\xbe\x4a\xfc\x01\xec\xba\x44\xcb\x61\x51\xc2\x5f\xd0\x11\x26\xef\x70\x73\x51\x51\x51\xd1\x39\x2f\xfa\x42\x3b\x9b\x23\x98\x6c\x62\x26\x98\xa2\xf2\x7d\x22\x84\x6d\x2a\xb6\xbb\xc9\xbb\x5c\x62\x10\xba\x1d\x13\x84\x93\x23\x22\xdb\x73\x6c\x02\x6b\x7b\xbe\x2a\x44\x16\x73\xc2\x82\xc7\x77\x7c\x85\x6b\x2e\xf9\x0a\x15\xfb\x88\x74\x26\x4b\xe2\x32\xc6\xa0\x5c\x73\x45\xd7\x32\xa3\x53\x7a\x08\xd9\x25\xd2\x12\x05\xa7\xec\x1e\x3f\x73\xba\x0d\x88\xc2\xc9\xd1\x3d\x57\xa0\xf2\x9f\xef\x38\x71\xf8\xf6\xdd\xe7\xfb\xe4\xa8\xf2\x86\x5b\x7d\x6b\x7e\x87\xc1\x9a\x17\xdf\xfc\xde\xf7\x4c\xd2\xec\xc4\xa3\x4a\x73\x05\xd9\x3c\x3a\x59\x40\x06\xaf\xc1\x02\xb7\x71\x3f\xe5\x25\x7e\xaa\xd6\xc6\x2c\x20\x7b\xf1\x02\xf4\x63\x8e\x7d\x05\xc6\xac\xf3\xf8\x2e\xa3\x9c\x7d\xe6\x14\xdf\x9e\xe6\xf2\x1e\x37\x01\x91\xab\xc5\x19\xd0\xac\x76\x93\x6e\xd5\x03\xc4\x8e\x8b\x1d\x64\xee\x66\x80\x5d\x56\xd1\x12\x65\x82\xca\xda\x06\xcf\xed\xbb\xe5\x67\x97\xc4\x09\xd7\x28\xc9\xef\xea\x41\xbd\x59\xbc\x5b\xa6\xf9\xd6\x57\xda\xcc\x46\x58\x3b\x09\x30\xf7\x3e\x3c\x94\x23\x33\x38\x09\x87\x72\xae\x4b\x4c\xac\xda\x0f\x95\x8c\xe7\x8d\x01\xa3\xe1\xe8\x9e\x35\x8b\xb1\x6e\x74\xc8\xef\x96\x18\x94\x9b\x32\xe6\x42\x58\x97\x4a\x8c\x29\xac\x8b\x2e\x48\xd7\xc4\x5c\xe1\xa5\xc1\xf1\xe5\x35\x94\x94\x17\x25\xd0\x2d\x42\xcd\x68\xaf\xc5\x30\x1c\x75\xf7\x53\x6a\xc9\xae\xa3\xd8\x8b\xb2\x79\x69\x03\xb3\xca\xd7\xce\x41\xf7\xaf\xd8\x9b\xa2\x10\x1b\xeb\x81\x1a\x4d\x0f\xe5\xec\x69\xe8\xba\xda\x7c\xed\xb5\x74\xb2\x25\x96\x48\x41\xf8\x48\xf3\xb4\xab\x5d\x53\x10\x59\x21\x84\x0f\x74\x8b\xa2\x40\x65\x4b\xec\x4b\x1d\xe6\x53\xbf\xd1\xa9\xc1\x19\x70\x5a\xc5\xb9\x2b\x4f\x62\x3d\x4e\x6d\x86\xea\x7d\x3b\x9d\xb2\xb7\x55\x26\x92\x61\x57\x76\x5c\xec\xd1\x9e\x6f\x17\x11\x44\xdd\x36\xd5\xa8\x3f\xaf\x6c\x56\xf7\x70\x2a\x4c\x05\xc6\xe4\x1a\xf4\x45\x6a\x5b\xc5\x8e\xf6\x85\x8b\xaa\x26\x86\xec\x4c\x12\xaa\x94\xc7\x18\x84\x2c\xb0\xbd\x69\xbf\x11\xae\xd9\xfe\xbe\x05\x75\x2e\x4d\xd9\x65\x75\x63\x15\x0d\x6f\x16\x7f\x55\xd8\x3b\x4c\x08\x14\xc6\xd4\x0d\x93\x16\x07\x52\xd3\xdd\xd1\xcd\x91\xfa\xf6\x37\x46\xda\xcb\x7f\x1e\x81\x7d\x2e\xb4\xb6\x68\xfa\x29\x4b\x6c\x59\xc9\x40\x6b\xab\xb2\x75\x4a\x6b\xdf\x9f\x88\x58\xfd\x6a\x35\xcf\xc6\x06\x42\xfd\x04\xa3\xa1\x3d\x6e\x4c\xf7\xcd\x1b\x7d\x17\xb4\xe6\xc8\x31\x36\x18\x8e\x0f\xf3\x08\xbc\x29\x36\xe0\xee\x3c\x57\xc6\x3c\xaf\xe1\xd7\x37\xb5\x8f\xbc\x31\xc3\xe6\xd8\x06\xd0\x1f\x42\xf7\xf1\xb6\x11\x1f\x18\x4e\x0f\x1e\xf7\xe9\x63\xdd\x6f\xcc\x1c\x88\x6a\xad\xac\x35\xc8\x0e\xdb\xea\x00\xc0\xb8\xdb\x9f\xce\xb1\x3f\x18\xfb\x03\x3a\xbe\x33\x3e\x14\xec\x14\xf5\x3a\x14\xf4\x2a\x6c\xef\xf8\xd6\x66\xf6\x09\xf2\x55\x65\xb4\x37\x8f\x3c\xeb\x6e\xbc\x9e\x47\xf0\xfc\x66\x43\x58\xb2\xb7\x55\x9a\xa2\xd2\xff\x9d\xc5\xad\x32\x74\xf3\xf7\x94\x5d\x48\xb1\x69\x8f\x7b\xe1\xc8\xc6\x85\x44\x97\x8b\x61\xbf\x2a\x77\x62\x09\xd7\x85\xe0\x84\x70\xac\xfc\x20\x7a\x0c\xd3\xd4\x4d\x9d\xbb\x1d\x7b\x91\x78\xf2\xaf\x23\x9e\x1e\x9a\x49\x9b\x95\xa5\xbe\xac\x86\x56\x19\x03\xa8\x94\xaf\xbb\x31\x40\x8b\xe6\x3e\x85\xc0\xf2\x3d\x8b\x40\x66\x22\xb4\x4f\x22\xd6\x8c\xbc\xfb\x0b\x11\x5c\xcb\xdf\x32\x46\xf0\x6c\xf7\x36\x7a\xe8\x57\x3d\xd0\xa4\xdc\xfe\x49\xbf\xe7\xaf\xa7\xe4\x9c\x73\xd7\xc7\x9c\x76\x2d\x69\x9b\x83\xec\xd2\xcd\x3b\x41\xb8\x68\xb1\x78\x6f\xb4\x3f\x29\xf6\xe7\xa5\x28\xb1\x86\xf1\x96\x97\x59\x3c\xf2\xb1\x34\x40\x62\x03\x97\x8e\xa5\x9d\xed\x88\x1d\x98\xbb\x08\x66\x52\x64\x12\xfb\x31\xfc\x6d\xc8\xff\x1f\xc4\x67\xcd\xf5\xfe\x0e\xb1\x78\xff\xa3\xe2\x22\xd8\x4a\x98\x75\x31\x8f\xb5\x26\x78\x52\xa7\xec\x9a\x1e\xed\xfc\xf2\xaf\x73\x92\xc8\xcf\x17\x10\xb5\x66\x7c\xd6\x19\xda\x07\x67\x9a\xaf\x9c\xa8\xfd\x5d\xc0\xda\x53\xf7\xbe\xe2\x7f\x74\xa0\xed\xc0\xea\x8c\xfa\x51\x07\xde\xf8\x97\xe2\xe3\xe6\x36\x9f\x6c\x11\xf0\xa2\x40\x99\x04\x35\x61\xd6\x9f\xf1\x44\x85\x57\x79\x5d\x3b\xdd\x11\x6f\x74\x9e\x1b\x4e\x6f\x9d\x91\x0b\x8c\x01\x1b\x7e\x8f\x0b\x5e\xb6\x90\x99\xd0\x7e\xd6\x82\x4f\x4c\x81\xb2\x41\x14\xc2\xeb\x08\x4e\x76\x09\xa3\x5c\x9e\x4e\x76\xf1\x4d\x30\x16\x7f\xe7\xf1\x1d\x2a\x66\x1f\xf5\x15\x67\xa9\xf6\xf8\xb7\x63\xf7\x73\x1b\xfb\x50\x09\xe1\x7e\x92\x31\xe6\xf8\x3b\x44\x8d\x03\x26\xad\x38\x9e\xf3\x62\x1f\x77\xcd\xd1\xd7\x77\x2d\x85\xd7\x68\x02\x0a\x27\x75\x25\xfc\x13\x00\x00\xff\xff\xeb\x30\xcc\xf6\xf5\x13\x00\x00")

func templatesFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionTmpl,
		"templates/function.tmpl",
	)
}

func templatesFunctionTmpl() (*asset, error) {
	bytes, err := templatesFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/function.tmpl", size: 5109, mode: os.FileMode(420), modTime: time.Unix(1666927126, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\x31\x0e\xc2\x30\x0c\x85\xe1\xdd\xa7\xb0\x3a\xc1\x40\x2e\xc1\xc4\x82\xb8\x82\x45\x1e\x6d\x85\xe2\x56\x21\x9b\xf5\xee\x8e\x94\x08\xba\xfd\xb2\xf5\xbe\x88\x8c\xd7\xea\xd0\x69\x81\x65\xd4\x89\x94\x88\x6a\x3e\x43\xd3\x75\x2b\x05\xde\x3e\x64\x44\xea\x0f\x78\xd6\x0b\x29\xbb\x3d\xdf\x36\x43\x23\xd2\x63\x24\x29\xb2\x96\x7d\xab\x4d\x4f\x87\x70\xeb\x97\x01\xdc\xad\x80\x1c\x93\xb6\xfc\x38\x52\xce\xf2\xcf\x6f\x00\x00\x00\xff\xff\x99\x8d\xcc\xfd\x8f\x00\x00\x00")

func templatesHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderTmpl,
		"templates/header.tmpl",
	)
}

func templatesHeaderTmpl() (*asset, error) {
	bytes, err := templatesHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.tmpl", size: 143, mode: os.FileMode(420), modTime: time.Unix(1666927126, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInlineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\xcb\xc9\xcc\x4b\x55\xaa\xad\x55\xa8\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4e\xcc\xc9\x51\x52\xd0\x03\x8b\xa6\xe6\xa5\xd4\xd6\x02\x02\x00\x00\xff\xff\xaa\xeb\x41\xff\x31\x00\x00\x00")

func templatesInlineTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInlineTmpl,
		"templates/inline.tmpl",
	)
}

func templatesInlineTmpl() (*asset, error) {
	bytes, err := templatesInlineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inline.tmpl", size: 49, mode: os.FileMode(420), modTime: time.Unix(1666927126, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInputsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\xb1\x0a\x02\x31\x0c\x80\xe1\xdd\xa7\x08\xc7\x8d\x92\x07\x10\x1c\x1c\x5d\x44\xf0\x09\x2a\x4d\x8f\x0e\x17\x25\xc9\x4d\x21\xef\x2e\x0d\x0e\x9d\xda\x7c\x84\x3f\xee\x95\x5a\x67\x82\xa5\xf3\xf7\x30\x5d\x22\xdc\xd7\x06\x97\x2b\xe0\xf8\xf6\x06\xfc\x31\xc0\xd7\xf1\x36\x52\xd3\xd9\x1e\x65\xa7\x1a\x61\x86\xee\xc4\x35\x62\xc0\x19\xfe\x43\xee\xad\x0d\x9f\xd2\xd9\xee\x19\x1f\x28\x85\x37\x4a\x2f\x52\x76\x32\x12\xcd\xc4\x4d\x36\x45\xf7\xd4\x71\x7a\xea\xcc\xcf\xe9\x17\x00\x00\xff\xff\x6d\x19\xdc\xb1\xb1\x00\x00\x00")

func templatesInputsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInputsTmpl,
		"templates/inputs.tmpl",
	)
}

func templatesInputsTmpl() (*asset, error) {
	bytes, err := templatesInputsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inputs.tmpl", size: 177, mode: os.FileMode(420), modTime: time.Unix(1666927126, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMessageTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\xe1\x6a\x83\x40\x10\x84\xff\xfb\x14\x8b\x28\xb4\xa0\xfb\x00\x85\x3e\x40\xff\x14\x69\x4b\xff\x5f\xe2\x68\x16\xf4\x62\xee\x4e\x43\x58\xf6\xdd\x83\x07\xf1\xd7\x0c\x33\xc3\x37\xaa\x3d\x06\xf1\xa0\x72\x46\x8c\x6e\x44\x49\xad\x59\xa1\x2a\x03\xf9\x6b\x22\xfe\x5d\x4f\x09\x31\x45\xb3\xfa\xc6\xa4\x0a\xdf\x9b\xa9\xde\x25\x5d\x88\x7f\x70\x86\x6c\x08\x7b\xc2\x7f\x8f\x05\xfc\xef\xa6\x15\x66\x7c\x0c\xf9\xdb\xcd\x30\x7b\xcb\x44\xee\x82\xf8\xf4\xe5\x97\x75\x07\xaa\x06\xe7\x47\x50\x25\x0d\x55\x98\xe8\xe3\x93\xb8\x73\xc1\xcd\x48\x08\xb9\x97\x81\x2a\x31\x6b\x5e\xbf\xf5\x76\x70\xb3\xbc\x17\xaa\x2d\x65\xfb\x0c\x00\x00\xff\xff\x90\x2e\xb9\x52\xc9\x00\x00\x00")

func templatesMessageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMessageTmpl,
		"templates/message.tmpl",
	)
}

func templatesMessageTmpl() (*asset, error) {
	bytes, err := templatesMessageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/message.tmpl", size: 201, mode: os.FileMode(420), modTime: time.Unix(1666927126, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResultsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\x4d\x0a\xc2\x40\x0c\x85\xaf\xf2\x28\xb3\x2c\x3d\x80\xe0\x52\xdc\x7b\x03\xa1\x19\x09\x94\x0c\xbc\x99\xae\x42\xee\x2e\xa9\x45\xc1\x55\x7e\xbe\x2f\x79\xee\xab\x54\x35\xc1\x44\xe9\xfb\x36\xfa\x14\x01\x77\x3e\xed\x25\x28\x3a\xa3\xc8\x86\xcb\x15\xcb\xe3\x83\x23\xdc\xb5\xa2\x68\xc4\x0c\x77\xb1\x35\x37\xf7\x36\xb0\x64\x73\xce\x5a\xf3\x60\xec\xb4\x7e\x23\x1b\x53\x16\xf2\xe4\x38\x84\xc6\xef\xd3\x7f\x39\x03\x7f\xee\x51\xdf\x01\x00\x00\xff\xff\xb0\x4f\xcf\x61\xa8\x00\x00\x00")

func templatesResultsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesResultsTmpl,
		"templates/results.tmpl",
	)
}

func templatesResultsTmpl() (*asset, error) {
	bytes, err := templatesResultsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/results.tmpl", size: 168, mode: os.FileMode(420), modTime: time.Unix(1666927126, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/basefunc.tmpl":   templatesBasefuncTmpl,
	"templates/call.tmpl":       templatesCallTmpl,
	"templates/finalsuite.tmpl": templatesFinalsuiteTmpl,
	"templates/function.tmpl":   templatesFunctionTmpl,
	"templates/header.tmpl":     templatesHeaderTmpl,
	"templates/inline.tmpl":     templatesInlineTmpl,
	"templates/inputs.tmpl":     templatesInputsTmpl,
	"templates/message.tmpl":    templatesMessageTmpl,
	"templates/results.tmpl":    templatesResultsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"basefunc.tmpl":   &bintree{templatesBasefuncTmpl, map[string]*bintree{}},
		"call.tmpl":       &bintree{templatesCallTmpl, map[string]*bintree{}},
		"finalsuite.tmpl": &bintree{templatesFinalsuiteTmpl, map[string]*bintree{}},
		"function.tmpl":   &bintree{templatesFunctionTmpl, map[string]*bintree{}},
		"header.tmpl":     &bintree{templatesHeaderTmpl, map[string]*bintree{}},
		"inline.tmpl":     &bintree{templatesInlineTmpl, map[string]*bintree{}},
		"inputs.tmpl":     &bintree{templatesInputsTmpl, map[string]*bintree{}},
		"message.tmpl":    &bintree{templatesMessageTmpl, map[string]*bintree{}},
		"results.tmpl":    &bintree{templatesResultsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
